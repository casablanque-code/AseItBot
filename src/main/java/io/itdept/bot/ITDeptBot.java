package io.itdept.bot;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
public class ITDeptBot extends TelegramLongPollingBot {

    private final String ADMIN_CHAT_ID = "366722822";

    @Override
    public String getBotUsername() {
        return "ase_it_bot";
    }

    @Override
    public String getBotToken() {
        return "7860811516:AAErBlfuPiy1BGHor453iODReiuSizWrUZc";
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleText(update);
            } else if (update.hasCallbackQuery()) {
                handleCallback(update);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: ", e);
        }
    }

    private void handleText(Update update) throws TelegramApiException {
        String chatId = update.getMessage().getChatId().toString();
        String text = update.getMessage().getText().trim();

        switch (text) {
            case "/start", "/help" -> {
                sendMessage(chatId, """
                        –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç IT-–æ—Ç–¥–µ–ª–∞.

                        –ù–∏–∂–µ ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
                        """, getMainKeyboard());
            }
            case "/status" -> sendMessage(chatId, "‚úÖ –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏");
            case "/menu" -> sendMenuButton(chatId);
            case "/race_monitoring" -> sendMonitoringButton(chatId);
            case "/jenkins" -> sendMessage(chatId, "‚úÖ –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∏–ª–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            case "/dhaka" -> sendMessage(chatId, "–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞, –µ—Å–ª–∏ —Ç—ã –≤ –æ—Ñ–∏—Å–µ –≤ –î–∞–∫–∫–µ");
            case "/wifi" -> sendMessage(chatId, """
                    –°–µ—Ç–∏ Wi‚ÄëFi:

                    üì∂ ASE‚ÄëVIP        ‚Äì asebd‚Äë1984
                    üì∂ ASE‚Äësite       ‚Äì 12345678
                    üì∂ ASE10          ‚Äì !asebd‚Äë3423!
                    üì∂ ASE1           ‚Äì !asebd‚Äë2015!
                    üì∂ ASE‚ÄëInternet   ‚Äì asebd‚Äë2019
                    """);
            case "/run_jobs" -> {
                if (!chatId.equals(ADMIN_CHAT_ID)) sendMessage(chatId, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                else runJobs(chatId);
            }
            case "/status_docker" -> {
                if (!chatId.equals(ADMIN_CHAT_ID)) sendMessage(chatId, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                else sendMessage(chatId, getServiceStatus("com.docker.service"));
            }
            default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help.");
        }
    }

    private void handleCallback(Update update) throws TelegramApiException {
        String chatId = update.getCallbackQuery().getMessage().getChatId().toString();
        String data = update.getCallbackQuery().getData();

        switch (data) {
            case "/status" -> sendMessage(chatId, "‚úÖ –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏");
            case "/wifi" -> sendMessage(chatId, """
                    –°–µ—Ç–∏ Wi-Fi:

                        üì∂ ASE-VIP
                        üîë asebd-1984

                        üì∂ ASE-site
                        üîë asebd-2029

                        üì∂ ASE10
                        üîë !asebd-3423!

                        üì∂ ASE1
                        üîë !asebd-2015!

                        üì∂ ASE-Internet
                        üîë asebd-2019

                        –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏.
                    """);
            case "/dhaka" -> sendMessage(chatId, "–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞, –µ—Å–ª–∏ —Ç—ã –≤ –æ—Ñ–∏—Å–µ –≤ –î–∞–∫–∫–µ");
            case "/jenkins" -> sendMessage(chatId, "‚úÖ –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∏–ª–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            case "/run_jobs" -> {
                if (!chatId.equals(ADMIN_CHAT_ID)) sendMessage(chatId, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                else runJobs(chatId);
            }
            case "/status_docker" -> {
                if (!chatId.equals(ADMIN_CHAT_ID)) sendMessage(chatId, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
                else sendMessage(chatId, getServiceStatus("com.docker.service"));
            }
            default -> sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.");
        }
    }

    private InlineKeyboardMarkup getMainKeyboard() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(InlineKeyboardButton.builder().text("ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞").callbackData("/status").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üì∂ Wi‚ÄëFi –ø–∞—Ä–æ–ª–∏").callbackData("/wifi").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üìç –ò–Ω—Ñ–æ –ø–æ –î–∞–∫–∫–µ").callbackData("/dhaka").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üõ†Ô∏è –°—Ç–∞—Ç—É—Å Jenkins –±–∏–ª–¥–æ–≤").callbackData("/jenkins").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üíæ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å–≤–∏—Ç—á–µ–π").callbackData("/run_jobs").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üê≥ –°—Ç–∞—Ç—É—Å Docker").callbackData("/status_docker").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üìã –ß–µ –≤ —Å—Ç–æ–ª–æ–≤–∫–µ").url("http://62.84.126.106:8081/menu/").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üìä Race monitoring").url("http://mrtg.race.net.bd:2225/cacti/graph_view.php").build()));

        return InlineKeyboardMarkup.builder().keyboard(rows).build();
    }

    private void runJobs(String chatId) {
        sendMessage(chatId, "üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±–∞ –±–∞—Ç–Ω–∏–∫–∞‚Ä¶");
        runBatch("C:\\docker\\ansible\\switch_backup.bat");
        runBatch("C:\\docker\\ansible\\telegram_notify_delayed.bat");
    }

    private void runBatch(String path) {
        try {
            new ProcessBuilder("cmd.exe", "/c", path).inheritIO().start();
        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–∞—Ç–Ω–∏–∫–∞: " + path, e);
            sendMessage(ADMIN_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ¬´" + path + "¬ª\n" + e.getMessage());
        }
    }

    private record ExecResult(int code, String out) {}

    private ExecResult exec(String cmd) {
        try {
            Process p = new ProcessBuilder("cmd.exe", "/c", cmd).redirectErrorStream(true).start();
            String out = new String(p.getInputStream().readAllBytes());
            int code = p.waitFor();
            return new ExecResult(code, out.trim());
        } catch (Exception e) {
            return new ExecResult(-1, e.getMessage());
        }
    }

    private String getServiceStatus(String serviceName) {
        ExecResult r = exec("sc query " + serviceName);
        if (r.code() != 0) return "‚ùå –û—à–∏–±–∫–∞: " + r.out();
        if (r.out().contains("RUNNING")) return "‚úÖ –°–ª—É–∂–±–∞ ¬´" + serviceName + "¬ª –∑–∞–ø—É—â–µ–Ω–∞.";
        if (r.out().contains("STOPPED")) return "‚õî –°–ª—É–∂–±–∞ ¬´" + serviceName + "¬ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.";
        return "‚ÑπÔ∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å:\n```\n" + r.out() + "\n```";
    }

    private void sendMenuButton(String chatId) {
        var button = InlineKeyboardButton.builder()
                .text("üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
                .url("http://62.84.126.106:8081/menu/")
                .build();

        var markup = InlineKeyboardMarkup.builder()
                .keyboard(List.of(List.of(button)))
                .build();

        var message = SendMessage.builder()
                .chatId(chatId)
                .text("–í–æ—Ç –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
                .replyMarkup(markup)
                .build();

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", e);
        }
    }

    private void sendMonitoringButton(String chatId) {
        var button = InlineKeyboardButton.builder()
                .text("üìä Open Race Monitoring")
                .url("http://mrtg.race.net.bd:2225/cacti/graph_view.php")
                .build();

        var markup = InlineKeyboardMarkup.builder()
                .keyboard(List.of(List.of(button)))
                .build();

        var message = SendMessage.builder()
                .chatId(chatId)
                .text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
                .replyMarkup(markup)
                .build();

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏", e);
        }
    }

    private void sendMessage(String chatId, String text, InlineKeyboardMarkup markup) {
        try {
            execute(SendMessage.builder().chatId(chatId).text(text).replyMarkup(markup).build());
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏", e);
        }
    }

    private void sendMessage(String chatId, String text) {
    try {
        execute(SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(getPersistentKeyboard())
                .build());
    } catch (TelegramApiException e) {
        log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
    }
}


    private ReplyKeyboardMarkup getPersistentKeyboard() {
    KeyboardRow row1 = new KeyboardRow();
    row1.add(new KeyboardButton("/start"));
    row1.add(new KeyboardButton("/help"));
    

    return ReplyKeyboardMarkup.builder()
            .keyboard(List.of(row1))
            .resizeKeyboard(true)
            .oneTimeKeyboard(false)
            .build();
}

}
